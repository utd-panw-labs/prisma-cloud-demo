
name: Prisma Cloud Docker Image Scan
on:
  pull_request:
    branches:
      - 'main'
env:
  SHA: $(git rev-parse HEAD)

jobs:


  dockerImages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate matrix with all modules of this repository
        id: set-matrix
        run: |
          echo "matrix=$(ls -l docker-images/ | grep '^d' | awk -F ' ' '{print $9}' | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  docker-build-and-scan:
    needs: dockerImages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.dockerImages.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - name: Docker Build
        run: |
          docker build -t panwdigitalnative/${{ matrix.path }}:latest -t panwdigitalnative/${{ matrix.path }}:${{ env.SHA }} -f ${{ github.workspace }}/docker-images/${{ matrix.path }}/Dockerfile ${{ github.workspace }}/docker-images/${{ matrix.path }}
        shell: bash {0}

      - name: Prisma Cloud image scan
        id: scan
        uses: PaloAltoNetworks/prisma-cloud-scan@v1
        with:
          pcc_console_url: ${{ secrets.PCC_CONSOLE_URL }}
          pcc_user: ${{ secrets.PCC_ACCESS_KEY_ID }}
          pcc_pass: ${{ secrets.PCC_SECRET_ACCESS_KEY }}
          image_name: panwdigitalnative/${{ matrix.path }}:latest


  terraformCode:
    runs-on: ubuntu-latest
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status    
    steps:
      - uses: actions/checkout@v3
      - name: Generate matrix1 with all Terraform code dirs of this repository
        id: terraform
        run: |
          echo "matrix=$(ls -l terraform/ | grep '^d' | awk -F ' ' '{print $9}' | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.terraform.outputs.matrix }}

  terraform-scan:
    needs: terraformCode
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.terraformCode.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Bridgecrew
        id: Bridgecrew
        uses: bridgecrewio/bridgecrew-action@master
        env:
          PRISMA_API_URL: https://api.eu.prismacloud.io    
        with:
          api-key: ${{ secrets.BC_API_KEY }}
          directory: "${{ github.workspace }}/terraform/${{ matrix.path }}"
          soft_fail: false
          framework: terraform
          output_format: cli,sarif
          output_file_path: console,results.sarif
          quiet: true
          download_external_modules: true
          log_level: WARNING
          check: CRITICAL,HIGH

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        
        # Results are generated only on a success or failure
        # this is required since GitHub by default won't run the next step
        # when the previous one has failed. Security checks that do not pass will 'fail'.
        # An alternative is to add `continue-on-error: true` to the previous step
        # Or 'soft_fail: true' to checkov.
        if: success() || failure()
        with:
          sarif_file: results.sarif

  kubernetesManifests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate matrix1 with all kubernetes code dirs of this repository
        id: kubernetes
        run: |
          echo "matrix=$(ls -l kubernetes/ | grep '^d' | awk -F ' ' '{print $9}' | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.kubernetes.outputs.matrix }}

  kubernetes-scan:
    needs: kubernetesManifests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.kubernetesManifests.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Bridgecrew
        id: Bridgecrew
        uses: bridgecrewio/bridgecrew-action@master
        env:
          PRISMA_API_URL: https://api.eu.prismacloud.io    
        with:
          api-key: ${{ secrets.BC_API_KEY }}
          directory: "${{ github.workspace }}/kubernetes/${{ matrix.path }}"
          soft_fail: false
          framework: kubernetes
          output_format: cli,sarif
          output_file_path: console,results.sarif
          quiet: true
          download_external_modules: true
          log_level: WARNING
          check: CRITICAL,HIGH
          #skip_check: LOW

